"use strict";export const Prompt = validate10;const schema11 = {"$id":"#/definitions/Prompt","$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"age":{"type":"number"},"gender":{"type":"string","enum":["male","female","non-binary"]},"emotions":{"type":"array","items":{"type":"string"}},"gestures":{"type":"array","items":{"type":"string"}}},"required":["age","gender","emotions","gestures"],"additionalProperties":false};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){/*# sourceURL="#/definitions/Prompt" */;let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((((data.age === undefined) && (missing0 = "age")) || ((data.gender === undefined) && (missing0 = "gender"))) || ((data.emotions === undefined) && (missing0 = "emotions"))) || ((data.gestures === undefined) && (missing0 = "gestures"))){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((key0 === "age") || (key0 === "gender")) || (key0 === "emotions")) || (key0 === "gestures"))){validate10.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.age !== undefined){let data0 = data.age;const _errs2 = errors;if(!((typeof data0 == "number") && (isFinite(data0)))){validate10.errors = [{instancePath:instancePath+"/age",schemaPath:"#/properties/age/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.gender !== undefined){let data1 = data.gender;const _errs4 = errors;if(typeof data1 !== "string"){validate10.errors = [{instancePath:instancePath+"/gender",schemaPath:"#/properties/gender/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!(((data1 === "male") || (data1 === "female")) || (data1 === "non-binary"))){validate10.errors = [{instancePath:instancePath+"/gender",schemaPath:"#/properties/gender/enum",keyword:"enum",params:{allowedValues: schema11.properties.gender.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.emotions !== undefined){let data2 = data.emotions;const _errs6 = errors;if(errors === _errs6){if(Array.isArray(data2)){var valid1 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){const _errs8 = errors;if(typeof data2[i0] !== "string"){validate10.errors = [{instancePath:instancePath+"/emotions/" + i0,schemaPath:"#/properties/emotions/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs8 === errors;if(!valid1){break;}}}else {validate10.errors = [{instancePath:instancePath+"/emotions",schemaPath:"#/properties/emotions/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.gestures !== undefined){let data4 = data.gestures;const _errs10 = errors;if(errors === _errs10){if(Array.isArray(data4)){var valid2 = true;const len1 = data4.length;for(let i1=0; i1<len1; i1++){const _errs12 = errors;if(typeof data4[i1] !== "string"){validate10.errors = [{instancePath:instancePath+"/gestures/" + i1,schemaPath:"#/properties/gestures/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs12 === errors;if(!valid2){break;}}}else {validate10.errors = [{instancePath:instancePath+"/gestures",schemaPath:"#/properties/gestures/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs10 === errors;}else {var valid0 = true;}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;}